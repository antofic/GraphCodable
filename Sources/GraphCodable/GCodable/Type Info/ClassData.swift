//	Apache License
//	Version 2.0, January 2004
//	http://www.apache.org/licenses/

import Foundation

struct ClassData : ClassDataProtocol {
	let	mangledClassName:			String	// generated by NSStringFromClass()
	let	encodedClassVersion:	UInt32	// encoded GEncodable.classVersion
}

extension ClassData { 	// init
	init<T>( type:T.Type ) throws where T:AnyObject, T:GEncodable {
		let mangledClassName = Self.mangledClassName(of: type)
		guard Self.classType( from:mangledClassName ) != nil else {
			throw GraphCodableError.cantConstructClass(
				Self.self, GraphCodableError.Context(
					debugDescription:"The class \(T.self) can't be constructed."
				)
			)
		}
		self.mangledClassName 		= mangledClassName
		self.encodedClassVersion	= type.classVersion
	}
}

extension ClassData {
	var isConstructible : Bool {
		decodedType != nil
	}
	
	private var encodedClass: (any (AnyObject & GDecodable).Type)? {
		Self.classType( from: mangledClassName ) as? any (AnyObject & GDecodable).Type
	}

	var decodedType: (any GDecodable.Type)? {
		encodedClass?.decodeType ?? nil
	}
	
	var replacedClass: (any (AnyObject & GDecodable).Type)? {
		if let type = encodedClass, type != type.decodeType {
			return type
		}
		return nil
	}
}

extension ClassData: BCodable {
	func encode(to encoder: inout some BEncoder) throws {
		try encoder.encode(mangledClassName)
		try encoder.encode(encodedClassVersion)
	}
	
	init(from decoder: inout some BDecoder) throws {
		self.mangledClassName			= try decoder.decode()
		self.encodedClassVersion	= try decoder.decode()
	}
}

extension ClassData: CustomStringConvertible { 	// CustomStringConvertible protocol
	var description: String {
		"\"\( className(true) )\" V\(encodedClassVersion) "
	}
}

extension ClassData {	// static primitive functions
	static func isConstructible( type:AnyClass ) -> Bool {
		classType( from:mangledClassName(of: type) ) != nil
	}
	
	static func throwIfNotConstructible( type:AnyClass ) throws {
		guard isConstructible( type:type ) else {
			throw GraphCodableError.cantConstructClass(
				Self.self, GraphCodableError.Context(
					debugDescription:"The class \( _typeName( type, qualified:true ) ) can't be constructed."
				)
			)
		}
	}
}

extension ClassData {	// private static primitive functions
	static private func classType( from mangledClassName:String ) -> AnyClass? {
		NSClassFromString( mangledClassName )
	}
	
	static private func mangledClassName( of classType:AnyClass ) -> String {
		NSStringFromClass( classType )
	}
}

